from src.clients.gemini_client import GeminiClient
from src.utils.setup_logging import setup_logging
from src.chat.chat_session import ChatSession
from src.config.agent_config import ConfigManager
from src.context import ContextManager
from pathlib import Path
import logging

from colorama import Fore, Style, init
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown

# Inicializa colorama
init(autoreset=True)
console = Console()

def main():
    # Configuraci√≥n avanzada de logging
    project_root = Path("/home/actra_dev/Desktop/ABIO")
    setup_logging(log_level="INFO", project_root=project_root)

    logger = logging.getLogger("GeminiChat")

    try:
        # Mostrar cabecera visual
        console.print(Panel.fit("[bold cyan]ü§ñ Bienvenido al sistema de chat Gemini[/bold cyan]\nEscribe 'salir' para terminar la sesi√≥n.", title="Gemini CLI", subtitle="Actra Dev"))

        # Cargar configuraci√≥n del agente
        config_manager = ConfigManager(config_path="Abiofile")  
        config = config_manager.get_config()
        logger.info("üìÑ Configuraci√≥n cargada desde Abiofile:")
        logger.info(config)

        # Inicializar el cliente de Gemini
        logger.info("Inicializando cliente de Gemini...")
        client = GeminiClient()

        # Crear una nueva sesi√≥n de chat
        session_id = "12345"
        context_manager = ContextManager(config.context.message_limit, config.context.context_messages)
        chat_session = ChatSession(
            session_id=session_id,
            model_name=config.chat.default_model,
            client=client,
            context_manager=context_manager
        )

        logger.info(f"‚úÖ Sesi√≥n de chat iniciada con ID: {session_id}")
        logger.info(f"üß† Modelo activo: {config.chat.default_model}")

        # Bucle principal de chat
        while True:
            user_input = input(Fore.CYAN + "\nT√∫: ")
            if user_input.strip().lower() == "salir":
                print(Fore.YELLOW + "üëã Terminando la sesi√≥n de chat. ¬°Hasta luego!")
                break

            chat_session.add_message(role="user", content=user_input)
            logger.info("üí¨ Generando respuesta del modelo...")

            try:
                response_message = chat_session.generate_response(prompt=user_input)
                print(Fore.GREEN + Style.BRIGHT + f"\n{config.agent.name}: {response_message.content}")
            except Exception as gen_error:
                logger.error("Error generando respuesta del modelo: %s", gen_error)
                print(Fore.RED + "‚ö†Ô∏è Ocurri√≥ un error al generar la respuesta. Intenta de nuevo.")

        # Mostrar historial de la sesi√≥n
        console.print("\nüìú [bold]Historial de la sesi√≥n:[/bold]")
        for message in chat_session.get_history():
            role = message.role.capitalize()
            if message.role == "user":
                print(Fore.CYAN + f"{role}: {message.content}")
            else:
                print(Fore.GREEN + Style.BRIGHT + f"{role}: {message.content}")

    except Exception as e:
        logger.exception("‚ùå Error durante la sesi√≥n de chat")
        print(Fore.RED + f"Ocurri√≥ un error inesperado: {e}")

    finally:
        if 'client' in locals() and client:
            client.close()
            logger.info("üîí Cliente Gemini cerrado correctamente.")

if __name__ == "__main__":
    main()
