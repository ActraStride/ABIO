"""
Module Name: test_gemini_client

Unit tests for the GeminiClient class from the gemini_client module.

This module provides comprehensive test coverage for the GeminiClient class,
including initialization scenarios, API configuration, and error handling.
All tests use mock objects generated by the mock_clients helper module
to avoid actual API calls during testing.

Example:
    Run these tests using pytest or unittest:
    >>> python -m unittest tests.clients.test_gemini_client
    >>> pytest tests/clients/test_gemini_client.py

Dependencies:
    - unittest
    - unittest.mock
    - os
    - sys
    - logging
    - tests.helpers.mock_clients
"""

import unittest
from unittest.mock import patch, MagicMock
import os
import sys
import logging
from typing import Optional, Dict, Any

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from src.clients.gemini_client import GeminiClient
import tests.helpers.mock_clients as mock_helpers

TEST_API_KEY = "test_api_key_from_setup"

class TestGeminiClient(unittest.TestCase):
    """
    Test suite for the GeminiClient class.

    This class contains unit tests that verify the proper initialization,
    configuration, and error handling of the GeminiClient. It uses the
    mock_clients helper module for setting up and tearing down mocks.
    """

    mocks_info: Optional[Dict[str, Any]] = None
    mock_load_dotenv: Optional[MagicMock] = None
    mock_genai: Optional[MagicMock] = None

    def setUp(self) -> None:
        """
        Set up the test environment before each test case using mock_helpers.

        This method:
        - Uses setup_gemini_mocks to patch dependencies (load_dotenv, genai, os.environ)
        - Stores the returned mock information.
        - Extracts relevant mock objects for use in tests.
        - Disables logging during tests to keep test output clean.
        """
        self.mocks_info = mock_helpers.setup_gemini_mocks(api_key=TEST_API_KEY)

        self.mock_load_dotenv = self.mocks_info["mocks"]["load_dotenv"]
        self.mock_genai = self.mocks_info["mocks"]["genai"]

        logging.disable(logging.CRITICAL)

    def tearDown(self) -> None:
        """
        Clean up the test environment after each test case using mock_helpers.

        This method:
        - Uses teardown_gemini_mocks to stop all patchers started in setUp.
        - Re-enables logging for other tests.
        """
        if self.mocks_info:
             mock_helpers.teardown_gemini_mocks(self.mocks_info)

        logging.disable(logging.NOTSET)

    def test_init_missing_api_key(self) -> None:
        """
        Test initialization with a missing API key.

        Verifies that the client raises a ValueError with an appropriate
        message when initialized without an API key in the environment.
        Note: Uses a local patch to override the environment set by setUp.

        Raises:
            AssertionError: If the expected exception is not raised or
                           if the error message doesn't match expectations.
        """
        with patch.dict(os.environ, {}, clear=True):
            with self.assertRaises(ValueError) as context:
                client = GeminiClient()

            self.assertIn("API key must be provided", str(context.exception))

        self.mock_load_dotenv.assert_called_once()
        self.mock_genai.configure.assert_not_called()


    def test_configure_api_success(self) -> None:
        """
        Test successful API configuration using the key from setUp.

        Verifies that the client correctly configures the Gemini SDK
        with the API key provided during mock setup.

        Raises:
            AssertionError: If the SDK is not configured with the correct API key
                           or if load_dotenv is not called.
        """
        client = GeminiClient()

        self.mock_genai.configure.assert_called_once_with(api_key=TEST_API_KEY)
        self.mock_load_dotenv.assert_called_once()

    def test_configure_api_failure(self) -> None:
        """
        Test API configuration failure handling.

        Verifies that the client correctly handles exceptions during API configuration 
        by converting them to RuntimeError with appropriate messages.

        Raises:
            AssertionError: If the exception is not properly caught and re-raised
                           or if the error message doesn't match expectations.
        """
        # Configure the mock to raise an exception when genai.configure is called
        self.mock_genai.configure.side_effect = Exception("SDK configuration error")
        
        # Attempt to initialize the client, which should trigger the exception
        with self.assertRaises(RuntimeError) as context:
            client = GeminiClient()
        
        # Verify the error message
        self.assertIn("Gemini SDK configuration failed", str(context.exception))
        
        # Verify that the original exception is preserved as the cause
        self.assertIsInstance(context.exception.__cause__, Exception)
        self.assertEqual("SDK configuration error", str(context.exception.__cause__))
        
        # Verify that configure was called with the correct API key
        self.mock_genai.configure.assert_called_once_with(api_key=TEST_API_KEY)
        
        # Verify that load_dotenv was called
        self.mock_load_dotenv.assert_called_once()

    def test_list_models_success(self) -> None:
        """
        Test successful retrieval of available models.
        
        Verifies that the client correctly retrieves and filters models
        that support content generation from the Gemini API.
        
        Raises:
            AssertionError: If the models aren't correctly filtered or returned,
                           or if the SDK methods aren't called as expected.
        """
        # Setup mock models with various capabilities
        mock_model1 = MagicMock()
        mock_model1.name = "model-1"
        mock_model1.supported_generation_methods = ["generateContent", "countTokens"]
        
        mock_model2 = MagicMock()
        mock_model2.name = "model-2"
        mock_model2.supported_generation_methods = ["generateContent"]
        
        mock_model3 = MagicMock()
        mock_model3.name = "model-3"
        mock_model3.supported_generation_methods = ["embedContent", "otherMethod"]
        
        # Configure the mock to return our test models
        self.mock_genai.list_models.return_value = [mock_model1, mock_model2, mock_model3]
        
        # Create client and call list_models
        client = GeminiClient()
        result = client.list_models()
        
        # Verify the results - only models with generateContent should be included
        self.assertEqual(["model-1", "model-2"], result)
        
        # Verify that list_models was called exactly once
        self.mock_genai.list_models.assert_called_once()


if __name__ == '__main__':
    unittest.main()